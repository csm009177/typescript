{
  "compilerOptions": {
    /* 프로젝트 */
    // "incremental": true,                              
/* 증분 컴파일을 사용하여 .tsbuildinfo 파일을 저장합니다. */
    // "composite": true,                                
/* 프로젝트 참조를 사용할 수 있도록 하는 제약 조건을 활성화합니다. */
    // "tsBuildInfoFile": "./.tsbuildinfo",              
/* .tsbuildinfo 증분 컴파일 파일의 경로를 지정합니다. */
    // "disableSourceOfProjectReferenceRedirect": true,  
/* 컴포지트 프로젝트를 참조할 때 선언 파일 대신 소스 파일을 우선하는 것을 비활성화합니다. */
    // "disableSolutionSearching": true,                 
/* 편집 시 멀티 프로젝트 참조 확인을 위한 프로젝트 검색을 비활성화합니다. */
    // "disableReferencedProjectLoad": true,             
/* TypeScript가 자동으로 로드하는 프로젝트 수를 줄입니다. */

    // 언어 및 환경 */
    "target": "es2016",                                  
/* 생성된 JavaScript의 JavaScript 언어 버전을 설정합니다. */
    // "lib": [],                                        
/* 대상 실행 환경을 설명하는 번들된 라이브러리 선언 파일의 집합을 지정합니다. */
    // "jsx": "preserve",                                
/* 생성된 JSX 코드의 형식을 지정합니다. */
    // "experimentalDecorators": true,                   
/* 레거시 실험적 데코레이터를 지원하는 실험적인 기능을 활성화합니다. */
    // "emitDecoratorMetadata": true,                    
/* 소스 파일에서 데코레이트된 선언에 대한 디자인 타입 메타데이터를 생성합니다. */
    // "jsxFactory": "",                                 
/* React JSX를 타겟팅할 때 사용되는 JSX 팩토리 함수를 지정합니다. */
    // "jsxFragmentFactory": "",                         
/* React JSX 출력을 타겟할 때 프래그먼트를 위한 JSX 프래그먼트 참조를 지정합니다. */
    // "jsxImportSource": "",                            
/* 'jsx: react-jsx*'를 사용할 때 JSX 팩토리 함수를 가져오기 위한 모듈 지정자를 지정합니다. */
    // "reactNamespace": "",                             
/* 'createElement'에 대해 호출되는 객체를 지정합니다. 이것은 'react' JSX 출력을 타겟할 때만 적용됩니다. */
    // "noLib": true,                                    
/* 기본 lib.d.ts를 포함하지 않도록 합니다. */
    // "useDefineForClassFields": true,                  
/* 클래스 필드를 ECMAScript 표준과 일치하는 방식으로 생성합니다. */
    // "moduleDetection": "auto",                        
/* 모듈 형식 JS 파일을 감지하는 방법을 제어합니다. */

    /* 모듈 */
    "module": "commonjs",                                
/* 생성된 모듈 코드를 지정합니다. */
    // "rootDir": "./",                                  
/* 소스 파일 내에서 기본 폴더를 지정합니다. */
    // "moduleResolution": "node10",                     
/* TypeScript가 주어진 모듈 지정자에서 파일을 찾는 방법을 지정합니다. */
    // "baseUrl": "./",                                  
/* 상대적이지 않은 모듈 이름을 해결하기 위한 기본 디렉터리를 지정합니다. */
    // "paths": {},                                      
/* 추가 검색 위치로 import를 다시 매핑하는 항목 집합을 지정합니다. */
    // "rootDirs": [],                                   
/* 모듈을 해결할 때 여러 폴더를 하나로 취급할 수 있도록 합니다. */
    // "typeRoots": [],                                  
/* '@types'의 여러 폴더를 지정합니다. */
    // "types": [],                                      
/* 소스 파일에서 참조되지 않은 채로 포함되는 타입 패키지 이름을 지정합니다. */
    // "allowUmdGlobalAccess": true,                     
/* 모듈에서 UMD 글로벌에 액세스를 허용합니다. */
    // "moduleSuffixes": [],                             
/* 모듈을 해결할 때 검색할 파일 이름 접미사 목록을 지정합니다. */
    // "allowImportingTsExtensions": true,               
/* TypeScript 파일 확장자를 포함할 수 있도록 합니다. '--moduleResolution bundler'와 '--noEmit' 또는 '--emitDeclarationOnly'가 설정되어 있어야 합니다. */
    // "resolvePackageJsonExports": true,                
/* 패키지 가져오기를 해결할 때 package.json 'exports' 필드를 사용합니다. */
    // "resolvePackageJsonImports": true,                
/* 가져오기를 해결할 때 package.json 'imports' 필드를 사용합니다. */
    // "customConditions": [],                           
/* 가져오기 해결 시 리졸버별 기본 설정에 추가되는 조건입니다. */
    // "resolveJsonModule": true,                        
/* .json 파일을 가져올 수 있도록 합니다. */
    // "allowArbitraryExtensions": true,                 
/* 선언 파일이 있는 경우 어떤 확장명의 파일을 가져올 수 있도록 합니다. */
    // "noResolve": true,                                
/* TypeScript가 프로젝트에 추가할 파일 수를 확장하는 'import', 'require' 또는 '<reference>'를 금지합니다. */

    /* JavaScript 지원 */
    // "allowJs": true,                                  
/* JavaScript 파일을 프로그램의 일부로 허용합니다. 'checkJS' 옵션을 사용하여 이러한 파일에서 오류를 받을 수 있습니다. */
    // "checkJs": true,                                  
/* 타입 검사된 JavaScript 파일에서 오류 보고를 활성화합니다. */
    // "maxNodeModuleJsDepth": 1,                        
/* 'node_modules'에서 JavaScript 파일을 확인할 때 사용되는 최대 폴더 깊이를 지정합니다. 'allowJs'와 함께 사용됩니다. */

    /* 생성 */
    // "declaration": true,                              
/* TypeScript 및 JavaScript 파일에서 .d.ts 파일을 생성합니다. */
    // "declarationMap": true,                           
/* .d.ts 파일에 대한 소스맵을 생성합니다. */
    // "emitDeclarationOnly": true,                      
/* JavaScript 파일이 아닌 .d.ts 파일만 출력합니다. */
    // "sourceMap": true,                                
/* 생성된 JavaScript 파일에 대한 소스맵 파일을 생성합니다. */
    // "inlineSourceMap": true,                          
/* 생성된 JavaScript 내부에 소스맵 파일을 포함시킵니다. */
    // "outFile": "./",                                  
/* 모든 출력을 하나의 JavaScript 파일로 번들합니다. 'declaration'이 true인 경우, 모든 .d.ts 출력을 번들 할 파일을 지정합니다. */
    // "outDir": "./",                                   
/* 모든 출력 파일을 위한 출력 폴더를 지정합니다. */
    // "removeComments": true,                           
/* 주석을 제거하지 않도록 설정합니다. */
    // "noEmit": true,                                   
/* 컴파일에서 파일을 출력하지 않도록 설정합니다. */
    // "importHelpers": true,                            
/* 프로젝트 당 tslib로부터 도우미 함수를 한 번만 가져올 수 있도록 허용합니다. */
    // "importsNotUsedAsValues": "remove",               
/* 사용되지 않은 가져오기가 타입용으로만 사용될 때의 emit/checking 동작을 지정합니다. */
    // "downlevelIteration": true,                       
/* 반복에 대해 ECMAScript 표준과 호환되는, 그러나 더 많은 코드를 생성합니다. */
    // "sourceRoot": "",                                 
/* 디버거가 참조 소스 코드를 찾을 수 있는 루트 경로를 지정합니다. */
    // "mapRoot": "",                                    
/* 디버거가 생성된 위치가 아닌 맵 파일을 찾을 수 있는 위치를 지정합니다. */
    // "inlineSources": true,                            
/* 생성된 JavaScript 내부에 소스 코드를 포함시킵니다. */
    // "emitBOM": true,                                  
/* 출력 파일 시작 부분에 UTF-8 BOM(Byte Order Mark)을 생성합니다. */
    // "newLine": "crlf",                                
/* 파일 출력에 대한 새 줄 문자를 설정합니다. */
    // "stripInternal": true,                            
/* '@internal'이 포함된 선언을 생성하지 않도록 설정합니다. */
    // "noEmitHelpers": true,                            
/* 컴파일된 출력에 '__extends'와 같은 사용자 지정 도우미 함수를 생성하지 않도록 설정합니다. */
    // "noEmitOnError": true,                            
/* 타입 체크 오류가 발생할 경우 파일을 출력하지 않도록 설정합니다. */
    // "preserveConstEnums": true,                       
/* 생성된 코드에서 'const enum' 선언을 제거하지 않도록 합니다. */
    // "declarationDir": "./",                           
/* 생성된 선언 파일을 위한 출력 디렉터리를 지정합니다. */
    // "preserveValueImports": true,                     
/* 사용되지 않은 가져오기 값을 보존합니다. */

    /* 상호 운용성 제약 */
    // "isolatedModules": true,                          
/* 다른 가져오기에 의존하지 않고 각 파일을 안전하게 변환할 수 있는지 확인합니다. */
    // "verbatimModuleSyntax": true,                     
/* 타입만으로 사용되지 않는 모든 가져오기 또는 내보내기를 변환하지 않습니다. 대신 'module' 설정에 따라 출력 파일의 형식이 지정됩니다. */
    // "allowSyntheticDefaultImports": true,             
/* 모듈에 기본 내보내기가 없을 때 'import x from y'를 허용합니다. */
    "esModuleInterop": true,                             
/* CommonJS 모듈을 가져올 때 추가 JavaScript를 생성하여 CommonJS 모듈을 가져오는 것을 쉽게 만듭니다. 이는 type 호환성을 위해 'allowSyntheticDefaultImports'를 활성화합니다. */
    // "preserveSymlinks": true,                         
/* 심볼릭 링크를 실제 경로로 변환하지 않습니다. 이는 노드에서 동일한 플래그입니다. */
    "forceConsistentCasingInFileNames": true,            
/* 가져오기의 케이싱이 올바른지 확인합니다. */

    /* 타입 체크 */
    "strict": true,                                      
/* 모든 엄격한 타입 체크 옵션을 활성화합니다. */
    // "noImplicitAny": true,                            
/* 암시적 'any' 타입을 가진 표현식 및 선언에 대한 오류 보고를 활성화합니다. */
    // "strictNullChecks": true,                         
/* 타입 체크 시 'null' 및 'undefined'를 고려합니다. */
    // "strictFunctionTypes": true,                      
/* 함수 할당 시 매개변수 및 반환 값이 하위 타입이 되도록 확인합니다. */
    // "strictBindCallApply": true,                      
/* 'bind', 'call', 'apply' 메서드의 인수가 원래 함수와 일치하는지 확인합니다. */
    // "strictPropertyInitialization": true,             
/* 생성자에서 설정되지 않은 클래스 속성을 확인합니다. */
    // "noImplicitThis": true,                           
/* 'this'에 'any' 타입이 지정될 때 오류 보고를 활성화합니다. */
    // "useUnknownInCatchVariables": true,               
/* 기본 catch 절 변수를 'any' 대신 'unknown'으로 설정합니다. */
    // "alwaysStrict": true,                             
/* 'use strict'를 항상 생성합니다. */
    // "noUnusedLocals": true,                           
/* 사용되지 않는 로컬 변수에 대한 오류 보고를 활성화합니다. */
    // "noUnusedParameters": true,                       
/* 함수 매개변수가 사용되지 않을 경우 오류 보고를 활성화합니다. */
    // "exactOptionalPropertyTypes": true,               
/* 선택적 속성 타입을 명시된 대로 해석하고 'undefined'를 추가하지 않습니다. */
    // "noImplicitReturns": true,                        
/* 명시적으로 반환하지 않는 함수의 코드 경로에 대한 오류 보고를 활성화합니다. */
    // "noFallthroughCasesInSwitch": true,               
/* switch 문의 fallthrough 케이스에 대한 오류 보고를 활성화합니다. */
    // "noUncheckedIndexedAccess": true,                 
/* 인덱스를 사용하여 접근할 때 타입에 'undefined'를 추가합니다. */
    // "noImplicitOverride": true,                       
/* 파생 클래스에서 재정의된 멤버가 override 수정자와 함께 표시되는지 확인합니다. */
    // "noPropertyAccessFromIndexSignature": true,       
/* 색인 형식으로 선언된 키를 사용하는 데 인덱스 접근자를 강제합니다. */
    // "allowUnusedLabels": true,                        
/* 사용되지 않는 레이블에 대한 오류 보고를 비활성화합니다. */
    // "allowUnreachableCode": true,                     
/* 도달할 수 없는 코드에 대한 오류 보고를 비활성화합니다. */

    /* 완성도 */
    // "skipDefaultLibCheck": true,                      
/* TypeScript와 함께 제공되는 .d.ts 파일의 타입 검사를 건너뜁니다. */
    "skipLibCheck": true                                 
/* 모든 .d.ts 파일의 타입 검사를 건너뜁니다. */
  }
}